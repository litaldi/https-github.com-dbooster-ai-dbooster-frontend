
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import { Database, GitBranch, AlertTriangle, CheckCircle, X, FileText, Download } from 'lucide-react';

interface CompatibilityIssue {
  id: string;
  severity: 'critical' | 'warning' | 'info';
  type: 'syntax' | 'function' | 'datatype' | 'feature';
  description: string;
  line?: number;
  originalCode: string;
  suggestedFix: string;
  supportedDatabases: string[];
}

interface CompatibilityResult {
  sourceDatabase: string;
  targetDatabases: string[];
  overallScore: number;
  issues: CompatibilityIssue[];
  migrationScript: string;
  supportMatrix: Record<string, boolean>;
}

export function MultiDatabaseCompatibilityAnalyzer() {
  const [sqlCode, setSqlCode] = useState('');
  const [sourceDb, setSourceDb] = useState('postgresql');
  const [targetDbs, setTargetDbs] = useState<string[]>(['mysql']);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [result, setResult] = useState<CompatibilityResult | null>(null);
  const [activeTab, setActiveTab] = useState('input');

  const supportedDatabases = [
    { value: 'postgresql', label: 'PostgreSQL' },
    { value: 'mysql', label: 'MySQL' },
    { value: 'sqlite', label: 'SQLite' },
    { value: 'sqlserver', label: 'SQL Server' },
    { value: 'oracle', label: 'Oracle' },
    { value: 'mongodb', label: 'MongoDB' }
  ];

  const analyzeCompatibility = async () => {
    if (!sqlCode.trim()) return;
    
    setIsAnalyzing(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const mockResult: CompatibilityResult = {
        sourceDatabase: sourceDb,
        targetDatabases: targetDbs,
        overallScore: 78,
        issues: [
          {
            id: '1',
            severity: 'critical',
            type: 'function',
            description: 'GENERATE_SERIES function is PostgreSQL-specific',
            line: 3,
            originalCode: 'SELECT * FROM GENERATE_SERIES(1, 10)',
            suggestedFix: 'Use a CTE with UNION ALL for MySQL compatibility',
            supportedDatabases: ['postgresql']
          },
          {
            id: '2',
            severity: 'warning',
            type: 'datatype',
            description: 'SERIAL datatype should be AUTO_INCREMENT in MySQL',
            line: 1,
            originalCode: 'id SERIAL PRIMARY KEY',
            suggestedFix: 'id INT AUTO_INCREMENT PRIMARY KEY',
            supportedDatabases: ['postgresql']
          },
          {
            id: '3',
            severity: 'info',
            type: 'syntax',
            description: 'Double quotes for identifiers should be backticks in MySQL',
            line: 5,
            originalCode: '"user_name"',
            suggestedFix: '`user_name`',
            supportedDatabases: ['postgresql', 'sqlite']
          }
        ],
        migrationScript: generateMigrationScript(),
        supportMatrix: {
          postgresql: true,
          mysql: false,
          sqlite: true,
          sqlserver: false,
          oracle: false
        }
      };
      
      setResult(mockResult);
      setActiveTab('results');
    } catch (error) {
      console.error('Compatibility analysis failed:', error);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const generateMigrationScript = () => {
    return `-- Migration script from PostgreSQL to MySQL
-- Generated by AI Database Compatibility Analyzer

-- Original PostgreSQL table
-- CREATE TABLE users (
--   id SERIAL PRIMARY KEY,
--   "user_name" VARCHAR(255) NOT NULL,
--   created_at TIMESTAMP DEFAULT NOW()
-- );

-- MySQL compatible version
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  \`user_name\` VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Replace GENERATE_SERIES with CTE
-- Original: SELECT * FROM GENERATE_SERIES(1, 10)
WITH RECURSIVE series AS (
  SELECT 1 AS n
  UNION ALL
  SELECT n + 1 FROM series WHERE n < 10
)
SELECT * FROM series;

-- Additional compatibility notes:
-- 1. Replace SERIAL with AUTO_INCREMENT
-- 2. Replace NOW() with CURRENT_TIMESTAMP
-- 3. Replace double quotes with backticks for identifiers
-- 4. Consider ENUM differences between databases`;
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-500';
      case 'warning': return 'text-orange-500';
      case 'info': return 'text-blue-500';
      default: return 'text-gray-500';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return <X className="h-4 w-4" />;
      case 'warning': return <AlertTriangle className="h-4 w-4" />;
      case 'info': return <CheckCircle className="h-4 w-4" />;
      default: return null;
    }
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <GitBranch className="h-5 w-5 text-primary" />
            Multi-Database Compatibility Analyzer
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList>
              <TabsTrigger value="input">SQL Input</TabsTrigger>
              <TabsTrigger value="results">Analysis Results</TabsTrigger>
              <TabsTrigger value="migration">Migration Script</TabsTrigger>
              <TabsTrigger value="matrix">Support Matrix</TabsTrigger>
            </TabsList>

            <TabsContent value="input" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Source Database</label>
                  <Select value={sourceDb} onValueChange={setSourceDb}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {supportedDatabases.map(db => (
                        <SelectItem key={db.value} value={db.value}>
                          {db.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Target Databases</label>
                  <div className="flex flex-wrap gap-2">
                    {supportedDatabases
                      .filter(db => db.value !== sourceDb)
                      .map(db => (
                        <Badge
                          key={db.value}
                          variant={targetDbs.includes(db.value) ? "default" : "outline"}
                          className="cursor-pointer"
                          onClick={() => {
                            if (targetDbs.includes(db.value)) {
                              setTargetDbs(targetDbs.filter(t => t !== db.value));
                            } else {
                              setTargetDbs([...targetDbs, db.value]);
                            }
                          }}
                        >
                          {db.label}
                        </Badge>
                      ))}
                  </div>
                </div>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">SQL Code</label>
                <Textarea
                  placeholder="Paste your SQL code here to analyze compatibility across different databases..."
                  value={sqlCode}
                  onChange={(e) => setSqlCode(e.target.value)}
                  rows={12}
                  className="font-mono text-sm"
                />
              </div>

              <Button 
                onClick={analyzeCompatibility} 
                disabled={isAnalyzing || !sqlCode.trim() || targetDbs.length === 0}
                className="w-full"
              >
                {isAnalyzing ? (
                  <>
                    <Database className="h-4 w-4 mr-2 animate-spin" />
                    Analyzing Compatibility...
                  </>
                ) : (
                  <>
                    <GitBranch className="h-4 w-4 mr-2" />
                    Analyze Compatibility
                  </>
                )}
              </Button>
            </TabsContent>

            <TabsContent value="results" className="space-y-4">
              {result ? (
                <div className="space-y-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-semibold">Compatibility Score</h3>
                      <p className="text-muted-foreground">
                        {result.sourceDatabase} â†’ {result.targetDatabases.join(', ')}
                      </p>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold">{result.overallScore}%</div>
                      <Progress value={result.overallScore} className="w-24" />
                    </div>
                  </div>

                  <div className="space-y-4">
                    <h4 className="font-medium">Compatibility Issues</h4>
                    {result.issues.map((issue) => (
                      <Card key={issue.id}>
                        <CardContent className="pt-4">
                          <div className="flex items-start gap-3">
                            <div className={getSeverityColor(issue.severity)}>
                              {getSeverityIcon(issue.severity)}
                            </div>
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-2">
                                <Badge variant={
                                  issue.severity === 'critical' ? 'destructive' : 
                                  issue.severity === 'warning' ? 'default' : 'secondary'
                                }>
                                  {issue.severity}
                                </Badge>
                                <Badge variant="outline">{issue.type}</Badge>
                                {issue.line && <span className="text-sm text-muted-foreground">Line {issue.line}</span>}
                              </div>
                              
                              <p className="mb-3">{issue.description}</p>
                              
                              <div className="space-y-2">
                                <div>
                                  <span className="text-sm font-medium text-red-600">Original:</span>
                                  <code className="block bg-red-50 p-2 rounded text-sm mt-1">
                                    {issue.originalCode}
                                  </code>
                                </div>
                                <div>
                                  <span className="text-sm font-medium text-green-600">Suggested fix:</span>
                                  <code className="block bg-green-50 p-2 rounded text-sm mt-1">
                                    {issue.suggestedFix}
                                  </code>
                                </div>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              ) : (
                <Alert>
                  <Database className="h-4 w-4" />
                  <AlertDescription>
                    Run compatibility analysis to see detailed results here.
                  </AlertDescription>
                </Alert>
              )}
            </TabsContent>

            <TabsContent value="migration" className="space-y-4">
              {result ? (
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h3 className="font-medium">Auto-Generated Migration Script</h3>
                    <Button size="sm" variant="outline">
                      <Download className="h-4 w-4 mr-2" />
                      Download Script
                    </Button>
                  </div>

                  <div className="bg-muted/50 p-4 rounded-lg">
                    <pre className="text-sm overflow-x-auto whitespace-pre-wrap">
                      <code>{result.migrationScript}</code>
                    </pre>
                  </div>
                </div>
              ) : (
                <Alert>
                  <FileText className="h-4 w-4" />
                  <AlertDescription>
                    Migration script will be generated after compatibility analysis.
                  </AlertDescription>
                </Alert>
              )}
            </TabsContent>

            <TabsContent value="matrix" className="space-y-4">
              {result ? (
                <div className="space-y-4">
                  <h3 className="font-medium">Database Support Matrix</h3>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    {Object.entries(result.supportMatrix).map(([db, supported]) => (
                      <div key={db} className="flex items-center justify-between p-3 border rounded-lg">
                        <span className="font-medium capitalize">{db}</span>
                        {supported ? (
                          <CheckCircle className="h-5 w-5 text-green-500" />
                        ) : (
                          <X className="h-5 w-5 text-red-500" />
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              ) : (
                <Alert>
                  <Database className="h-4 w-4" />
                  <AlertDescription>
                    Database support matrix will be shown after analysis.
                  </AlertDescription>
                </Alert>
              )}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}
